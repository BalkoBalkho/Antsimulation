#include <SFML/System.hpp>
#include <vector>
#include <algorithm>
#include <cmath>
#include <iostream>
#include "Ant.h"
#include "Food.h"
#include "Pheromone.h"
#include "Constants.h"
#include "World.h"

using namespace std;

int main() {
    sf::VideoMode desktopMode = sf::VideoMode::getDesktopMode();
    sf::RenderWindow window(desktopMode, "Ant Simulation", sf::Style::Fullscreen);
    window.setFramerateLimit(60);

    vector<Ant> ants;
    vector<Food> foodSources;
    vector<Pheromone> pheromones;

    // Nest setup
    sf::Vector2f nestPosition(desktopMode.width/2, desktopMode.height/2);
    sf::CircleShape nest(20);
    nest.setFillColor(sf::Color::White);
    nest.setPosition(nestPosition.x - 20, nestPosition.y - 20);

    // Create ants
    for (int i = 0; i < NUM_ANTS; ++i) {
        ants.emplace_back(nestPosition);
    }

    // Load food with textures
    foodSources.emplace_back(Food(sf::Vector2f(600, 400), "bread.png"));
    foodSources.emplace_back(Food(sf::Vector2f(200, 300), "sugar.png"));
    //foodSources.emplace_back(Food(sf::Vector2f(1000, 800), "images/crumbs.png")); // Add more as needed

    sf::Clock clock;

    // Create a view for controlling the visible area
    sf::View view(sf::FloatRect(0, 0, desktopMode.width, desktopMode.height));
    view.setCenter(nestPosition);

    World world;
    world.j(); // Initialize the world with noise generation

    while (window.isOpen()) {
        float dt = clock.restart().asSeconds();
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();
        }

        // Handle view movement with keyboard (WASD or arrow keys)
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::W)) {
            view.move(0, -200 * dt);
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::S)) {
            view.move(0, 200 * dt);
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::A)) {
            view.move(-200 * dt, 0);
        }
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::D)) {
            view.move(200 * dt, 0);
        }

        // Update pheromones
        for (auto& p : pheromones) p.strength *= PHEROMONE_DECAY;
        pheromones.erase(remove_if(pheromones.begin(), pheromones.end(),
            [](const Pheromone& p) { return p.strength < 0.1f; }), pheromones.end());

        // Update ants
        for (auto& ant : ants) {
            ant.update(dt, pheromones, foodSources, nestPosition, world);

            if (!ant.hasFood) {
                for (auto& food : foodSources) {
                    if (hypot(food.position.x - ant.position.x,
                              food.position.y - ant.position.y) < 15.0f && food.quantity > 0) {
                        ant.hasFood = true;
                        food.quantity -= 1.0f;
                    }
                }
            } else {
                if (hypot(nestPosition.x - ant.position.x,
                          nestPosition.y - ant.position.y) < 30.0f) {
                    ant.hasFood = false;
                }
            }
        }

        // Draw everything
        window.clear(sf::Color(50, 50, 50));
        window.setView(view);

        // Draw the world terrain
        window.draw(world.vertices);

        // Draw pheromones
        for (auto& p : pheromones) {
            sf::CircleShape dot(3);
            dot.setPosition(p.getPosition());
            dot.setFillColor(p.hasFood ?
                sf::Color(0, 255, 0, static_cast<sf::Uint8>(p.strength)) :
                sf::Color(255, 255, 255, static_cast<sf::Uint8>(p.strength)));
            window.draw(dot);
        }

        for (auto& food : foodSources) {
            food.draw(window); // Use image-based drawing
        }

        // Draw ants
        for (auto& ant : ants) {
            ant.draw(window);
        }

        window.draw(nest);
        window.display();
    }

    return 0;
}
